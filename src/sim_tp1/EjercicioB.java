/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sim_tp1;

import javax.swing.JOptionPane;

/**
 *
 * @author filardo
 */
public class EjercicioB extends javax.swing.JFrame {

    /**
     * Creates new form EjercicioB
     */
    public EjercicioB() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbl_cantidad = new javax.swing.JLabel();
        lbl_intervalos = new javax.swing.JLabel();
        txt_cantidad = new javax.swing.JTextField();
        txt_intervalos = new javax.swing.JTextField();
        btn_generar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Prueba de Frecuencias"));

        lbl_cantidad.setText("Cantidad:");

        lbl_intervalos.setText("Intervalos:");

        txt_cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cantidadActionPerformed(evt);
            }
        });

        btn_generar.setText("Generar");
        btn_generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_generarActionPerformed(evt);
            }
        });

        display.setColumns(20);
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_cantidad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(lbl_intervalos)
                        .addGap(4, 4, 4)
                        .addComponent(txt_intervalos, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_generar)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_cantidad)
                    .addComponent(lbl_intervalos)
                    .addComponent(txt_cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_intervalos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_generar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.getAccessibleContext().setAccessibleName("Prueba de frecuencia");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_cantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cantidadActionPerformed

    private void btn_generarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_generarActionPerformed
        // TODO add your handling code here:
        
        if (verificarCampos()){
            System.out.println("Campos verificados.");
            
            // método temporal para mostrar los números
            double [] n = generarNumeros();
            mostrarNumeros(n);
            System.out.println(imprimirArreglo(contarFrecuenciaEnIntervalos(n,Integer.parseInt(this.txt_intervalos.getText()))));
            
        } else {
            System.out.println("Ocurrió un error");
        }
        
    }//GEN-LAST:event_btn_generarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EjercicioB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EjercicioB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EjercicioB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EjercicioB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EjercicioB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_generar;
    private javax.swing.JTextArea display;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_cantidad;
    private javax.swing.JLabel lbl_intervalos;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_intervalos;
    // End of variables declaration//GEN-END:variables

    private boolean verificarCampos() {
        
        if(this.txt_cantidad.getText().isEmpty()) return false;
        if(this.txt_intervalos.getText().isEmpty()) return false;
        
        try {
            if (Integer.parseInt(this.txt_intervalos.getText()) > Integer.parseInt(this.txt_cantidad.getText())){
                // no puede haber más intervalos que números
                JOptionPane.showMessageDialog(null,"La cantidad de intervalos debe ser menor a la de los números generados");
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,"Inserte sólo números enteros");
        }
        
        return true;
    }

    /**
     * 
     * @return un array de números generados aleatoriamente por Java 
     */
    private double[] generarNumeros() {
        
        // ya sabemos que no puede arrojar NumberFormatException
        int N = Integer.parseInt(this.txt_cantidad.getText());
        double [] num = new double[N];
        
        for (int i = 0; i < num.length; i++) {
            num[i] = Math.random();
        }
        
        return num;
    }

    /**
     * Muestra los números generados en el display
     * @param num 
     */
    private void mostrarNumeros(double[] num) {
       
       String s = imprimirArreglo(num);
       this.display.setText(s);
        
    }

    /**
     * Toma el arreglo de doubles y lo convierte en un string
     * Después habría que hacer que se convierta en un arreglo, para dividir
     * más fácilmente en intervalos.
     * @param num
     * @return 
     */
    private String imprimirArreglo(double[] num) {
    
        String s = "";
        
        for (int i = 0; i < num.length; i++) {
            s += String.valueOf(num[i]) + " - ";
        }
        return s;
    }
    
    /**
     * Sobrecarga para permitir leer el array de int
     * @param num
     * @return 
     */
    private String imprimirArreglo(int[] num) {
    
        String s = "";
        
        for (int i = 0; i < num.length; i++) {
            s += String.valueOf(num[i]) + " - ";
        }
        return s;
    }
    
    /**
     * Si alguno encuentra una forma mejor, ¯\_(ツ)_/¯
     * Cuenta la frecuencia en la que aparecen números en cada intervalo.
     *
     * @param num - el array de números aleatorios
     * @param intervalos - la cantidad de intervalos en los que se dividen
     * @return 
     */
    
    private int[] contarFrecuenciaEnIntervalos(double[] num, int intervalos) {
      
        int [] cont = new int [intervalos];
        // marca el límite para el primer casillero
        double limiteFijo = (double)1/intervalos;
        
        // recorro todos los números aleatorios
        for (int i = 0; i < num.length; i++) {
        
            double limiteVar = limiteFijo;
            int foo = 1; // multiplicador del límite
            int casillero = 0; // intervalo al que corresponde
         
            // mientras no corresponda a ese intervalo
            while (num[i] > limiteVar) {
                foo++;
                limiteVar = limiteFijo * foo; // e.g. si hay 10 intervalos crece como 0.1, 0.2, etc.
                casillero++;
                System.out.println(num[i]);
                System.out.println(limiteVar);
            }
            // pero si entra en ese intervalo,
            cont[casillero]++;
        }
        
        return cont;
    }
    
}
